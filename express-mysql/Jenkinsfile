// Function to validate that the message returned from SonarQube is ok
def qualityGateValidation(qg) {
  if (qg.status != 'OK') {
    // emailext body: "WARNING SANTI: Code coverage is lower than 80% in Pipeline ${BUILD_NUMBER}", subject: 'Error Sonar Scan,   Quality Gate', to: "${EMAIL_ADDRESS}"
    return true
  }
  // emailext body: "CONGRATS SANTI: Code coverage is higher than 80%  in Pipeline ${BUILD_NUMBER} - SUCCESS", subject: 'Info - Correct Pipeline', to: "${EMAIL_ADDRESS}"
  return false
}

pipeline {
  agent any

  tools {
      nodejs 'nodejs'
  }

  environment {
      // General Variables for Pipeline
      PROJECT_ROOT = 'express-mysql/app'
      EMAIL_ADDRESS = 'ioelgomez2019@gmail.com'
      REGISTRY = 'ioelgomez2019/docker-pirate-express'
  }

  stages {
      stage('Hello') {
        steps {
          // First stage is a sample hello-world step to verify correct Jenkins Pipeline
          echo 'Hello World, I am Happy'
          echo 'This is my amazing Pipeline'
        }
      }
      stage('Checkout') {
        steps {
          // Get Github repo using Github credentials (previously added to Jenkins credentials)
          checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/ioelgomez2019/docker-pipiline']]])
        }
      }
      stage('Install dependencies') {
        steps {
          sh 'npm --version'
          sh "cd ${PROJECT_ROOT}; npm install"
        }
      }
      stage('Unit tests') {
        steps {
          // Run unit tests
          sh "cd ${PROJECT_ROOT}; npm run test"
        }
      }
      stage('Generate coverage report') {
        steps {
          // Run code-coverage reports
          sh "cd ${PROJECT_ROOT}; npm run coverage"
        }
      }
      stage('scan') {
        steps {
            withSonarQubeEnv('sonarqube') {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        /var/jenkins_home/tools/hudson.plugins.sonar.SonarRunnerInstallation/sonar-scanner/bin/sonar-scanner \
                        -Dsonar.projectKey=SimpleExpressExample:Test \
                        -Dsonar.projectName=SimpleExpressExample \
                        -Dsonar.projectVersion=0.0.1 \
                        -Dsonar.host.url=http://mysonarqube:9000 \
                        -Dsonar.sources=./express-mysql/app/app.js,./express-mysql/app/config/db.config.js,./express-mysql/app/routes/developers.js \
                        -Dsonar.login=${SONAR_TOKEN} \
                        -Dsonar.tests=./express-mysql/app/test \
                        -Dsonar.javascript.lcov.reportPaths=./express-mysql/app/coverage/lcov.info
                    '''
                }
            }
        }
      }
      stage('Build docker-image') {
        steps {
          sh "cd ./${PROJECT_ROOT}; docker build -t ${REGISTRY}:${BUILD_NUMBER} . "
        }
      }
      stage('Deploy docker-image') {
        steps {
          // If the Dockerhub authentication stopped, do it again
          withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh 'docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}'
            sh "docker push ${REGISTRY}:${BUILD_NUMBER}"
          }
        }
      }
  }
}